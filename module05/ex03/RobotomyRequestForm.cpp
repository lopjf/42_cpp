#include "RobotomyRequestForm.hpp"

// Constructors
RobotomyRequestForm::RobotomyRequestForm() : AForm("RobotomyRequestForm", 72, 45), _target("Default")
{
}

RobotomyRequestForm::RobotomyRequestForm(const RobotomyRequestForm &copy) : AForm(copy.getName(), copy.getRequiredGrade(), copy.getGradeExecute()), _target(copy.getTarget())
{
}
RobotomyRequestForm::RobotomyRequestForm(const std::string &target) : AForm("RobotomyRequestForm", 72, 45), _target(target)
{
}


// Destructor
RobotomyRequestForm::~RobotomyRequestForm()
{
}


// Operators
RobotomyRequestForm & RobotomyRequestForm::operator=(const RobotomyRequestForm &assign)
{
	AForm::operator=(assign);
	return *this;
}

// Getters / Setters
const std::string RobotomyRequestForm::getTarget() const
{
	return this->_target;
}

// Methods
void RobotomyRequestForm::execute(Bureaucrat const & executor) const
{
	checkExecute(executor);



// Seeding the random number generator using srand() with the current time is a common practice because it helps ensure that the sequence of random numbers generated by your program is different each time you run it
    // Seed the random number generator with the current time
    std::srand(static_cast<unsigned int>(std::time(NULL)));

    // Generate a random number between 1 and 2
    int randomValue = (std::rand() % 2) + 1;

	std::cout << "Makes some drilling noises... Trees computed!" << std::endl;
	if (randomValue == 1)
		std::cout << getTarget() << " has been robotomized successfully." << std::endl;
	else
		std::cout << getTarget() << " robotomization failed." << std::endl;
}
